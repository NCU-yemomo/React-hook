{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u989C\\u5B87\\u822A\\\\Desktop\\\\\\u5B66\\u4E60\\u6587\\u4EF6\\\\web\\u5B66\\u4E60\\\\ReactHook\\\\src\\\\AppHello.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AppHello(props) {\n  _s();\n  //设置空状态\n  const [count, setCount] = useState(null);\n  let time = 0;\n  //果你传入了一个空数组（[]），effect 内部的 props 和 state 就会一直拥有其初始值。\n  //尽管传入 [] 作为第二个参数更接近大家更熟悉的 componentDidMount 和 componentWillUnmount 思维模式，\n  const [duration, setDuration] = useState(0);\n  useEffect(() => {\n    console.log(props);\n    let TimeClick = setInterval(time => {\n      time + 1;\n    }, 1000);\n\n    //每一次页面重新渲染时都会执行，万分注意！！\n    return () => {\n      //清除作用,清除作用会在每一次React重新渲染执行\n      console.log(\"clear\", props);\n      clearInterval(TimeClick);\n    };\n  }, [duration]); //在time更改时清除1\n  //useEffect可以返回一个函数清除副作用\n  //React 会在组件销毁时执行清除操作\n  //然后在后续渲染时重新执行副作用函数。\n  useEffect(() => {\n    document.title = `You clicked ${count}times,and run ${time}second`;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Time is \", time]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"pass Props is\", props.value]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"onClick times = \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount(count + 1),\n      children: \"click add Count\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n_s(AppHello, \"2iHs1GXvBw2zxCWWMjpBJ518Eb8=\");\n_c = AppHello;\nexport default AppHello;\nvar _c;\n$RefreshReg$(_c, \"AppHello\");","map":{"version":3,"names":["React","useState","useEffect","AppHello","props","count","setCount","time","duration","setDuration","console","log","TimeClick","setInterval","clearInterval","document","title","value"],"sources":["C:/Users/颜宇航/Desktop/学习文件/web学习/ReactHook/src/AppHello.jsx"],"sourcesContent":["import React from 'react'\r\nimport {useState,useEffect} from \"react\"\r\nfunction AppHello(props){\r\n    //设置空状态\r\n    const [count,setCount]=useState(null)\r\n    let time=0\r\n    //果你传入了一个空数组（[]），effect 内部的 props 和 state 就会一直拥有其初始值。\r\n    //尽管传入 [] 作为第二个参数更接近大家更熟悉的 componentDidMount 和 componentWillUnmount 思维模式，\r\n    const [duration,setDuration]=useState(0)\r\n    useEffect(()=>{\r\n        console.log(props)\r\n        let TimeClick=setInterval((time)=>{time+1},1000)\r\n        \r\n        //每一次页面重新渲染时都会执行，万分注意！！\r\n        return () => {\r\n            //清除作用,清除作用会在每一次React重新渲染执行\r\n            console.log(\"clear\",props)\r\n            clearInterval(TimeClick) \r\n        };\r\n    },[duration])//在time更改时清除1\r\n    //useEffect可以返回一个函数清除副作用\r\n    //React 会在组件销毁时执行清除操作\r\n    //然后在后续渲染时重新执行副作用函数。\r\n    useEffect(()=>{\r\n        document.title=`You clicked ${count}times,and run ${time}second`\r\n    })\r\n    return (\r\n        <div>\r\n            <div>Time is {time}</div>\r\n            <p>pass Props is{props.value}</p>\r\n            <p>onClick times = {count}</p>\r\n            <button onClick={()=>setCount(count+1)}>click add Count</button>\r\n        </div>\r\n    )\r\n}\r\nexport default AppHello\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,QAAQ,EAACC,SAAS,QAAO,OAAO;AAAA;AACxC,SAASC,QAAQ,CAACC,KAAK,EAAC;EAAA;EACpB;EACA,MAAM,CAACC,KAAK,EAACC,QAAQ,CAAC,GAACL,QAAQ,CAAC,IAAI,CAAC;EACrC,IAAIM,IAAI,GAAC,CAAC;EACV;EACA;EACA,MAAM,CAACC,QAAQ,EAACC,WAAW,CAAC,GAACR,QAAQ,CAAC,CAAC,CAAC;EACxCC,SAAS,CAAC,MAAI;IACVQ,OAAO,CAACC,GAAG,CAACP,KAAK,CAAC;IAClB,IAAIQ,SAAS,GAACC,WAAW,CAAEN,IAAI,IAAG;MAACA,IAAI,GAAC,CAAC;IAAA,CAAC,EAAC,IAAI,CAAC;;IAEhD;IACA,OAAO,MAAM;MACT;MACAG,OAAO,CAACC,GAAG,CAAC,OAAO,EAACP,KAAK,CAAC;MAC1BU,aAAa,CAACF,SAAS,CAAC;IAC5B,CAAC;EACL,CAAC,EAAC,CAACJ,QAAQ,CAAC,CAAC;EACb;EACA;EACA;EACAN,SAAS,CAAC,MAAI;IACVa,QAAQ,CAACC,KAAK,GAAE,eAAcX,KAAM,iBAAgBE,IAAK,QAAO;EACpE,CAAC,CAAC;EACF,oBACI;IAAA,wBACI;MAAA,uBAAcA,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QAAO,eACzB;MAAA,4BAAiBH,KAAK,CAACa,KAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QAAK,eACjC;MAAA,+BAAoBZ,KAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QAAK,eAC9B;MAAQ,OAAO,EAAE,MAAIC,QAAQ,CAACD,KAAK,GAAC,CAAC,CAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAyB;EAAA;IAAA;IAAA;IAAA;EAAA,QAC9D;AAEd;AAAC,GAhCQF,QAAQ;AAAA,KAARA,QAAQ;AAiCjB,eAAeA,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}